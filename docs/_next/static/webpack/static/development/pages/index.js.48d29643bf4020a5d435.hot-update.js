webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! topojson-client */ \"./node_modules/topojson-client/src/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @reuters-graphics/graphics-atlas-client */ \"./node_modules/@reuters-graphics/graphics-atlas-client/dist/index.js\");\n/* harmony import */ var _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar Atlas = new _reuters_graphics_graphics_atlas_client__WEBPACK_IMPORTED_MODULE_8___default.a();\n\nvar Globetrotter = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Globetrotter, _ChartComponent);\n\n  var _super = _createSuper(Globetrotter);\n\n  function Globetrotter() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, Globetrotter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      border_stroke_color: '#2f353f',\n      outer_stroke_color: 'rgba(255, 255, 255, 0.5)',\n      stroke_width_countries: 0.5,\n      stroke_width_sphere: 0.1,\n      highlight_color: '#fce587',\n      base_color: 'rgba(255, 255, 255, 0.2)',\n      vertical_tilt: 15,\n      margin: 10,\n      duration: 750,\n      enable_dot: true,\n      dot_radius: 5,\n      disputed: true,\n      location: {\n        value: false,\n        type: 'country'\n      },\n      // Other types are point and region\n      area_threshold: 10,\n      disputed_dasharray: [5, 5],\n      topojsonFeatures: {\n        countries: 'countries',\n        disputedBoundaries: 'disputedBoundaries',\n        land: 'land'\n      },\n      countryIdGetter: function countryIdGetter(properties) {\n        return properties.isoAlpha3;\n      }\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Globetrotter, [{\n    key: \"draw\",\n    value: function draw() {\n      var props = this.props();\n      var topology = this.topojson();\n      var countriesFeatures = topology.objects[props.topojsonFeatures.countries];\n      var disputedBoundariesFeatures = topology.objects[props.topojsonFeatures.disputedBoundaries];\n      var landFeatures = topology.objects[props.topojsonFeatures.land];\n      var node = this.selection().node();\n      var sphere = {\n        type: 'Sphere'\n      };\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var countries = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](topology, countriesFeatures);\n      var borders = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"mesh\"](topology, countriesFeatures, function (a, b) {\n        return a !== b;\n      });\n      var disputed = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"mesh\"](topology, disputedBoundariesFeatures);\n      var land2 = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"feature\"](topology, landFeatures);\n      var land = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"merge\"](topology, countriesFeatures.geometries);\n      console.log('land', land, land2);\n      var projection = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoOrthographic().fitExtent([[10, 10], [width - 10, width - 10]], sphere);\n      var canvas = this.selection().appendSelect('canvas').attr('width', width).attr('height', width);\n      var x = canvas.attr('centroid-x');\n      var y = canvas.attr('centroid-y');\n      var p1 = [-x, props.vertical_tilt - y];\n\n      if (x && y) {\n        projection.rotate(p1);\n      }\n\n      var context = canvas.node().getContext('2d');\n      var path = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath(projection, context);\n      var p2 = [];\n      var location;\n      var country;\n\n      if (Array.isArray(props.location.value) && props.location.value.length === 2 && props.location.type === 'point') {\n        p2[0] = props.location.value[0];\n        p2[1] = props.location.value[1];\n      } else if (props.location.type === 'region') {\n        var countryList = Atlas.getRegion(props.location.value).countries.map(function (d) {\n          return d.isoAlpha3;\n        });\n\n        var _merged = topojson_client__WEBPACK_IMPORTED_MODULE_7__[\"merge\"](topology, countries.geometries.filter(function (d) {\n          return countryList.includes(props.countryIdGetter(d.properties));\n        }));\n\n        p2 = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoCentroid(_merged);\n      } else if (props.location.type === 'country') {\n        var l = Atlas.getCountry(props.location.value);\n\n        if (l) {\n          location = l.isoAlpha3;\n          country = countries.features.filter(function (d) {\n            return props.countryIdGetter(d.properties) === location;\n          })[0];\n          p2 = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoCentroid(country);\n        } else {\n          location = 'NA';\n\n          if (p2.length === 0) {\n            p2 = p1;\n          }\n        }\n      }\n\n      var area, endPath, merged;\n      render();\n\n      function render() {\n        if (p1[0] !== p2[0] && p1[1] !== p2[1] && p2[0] && p2[1]) {\n          endPath = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoPath(_utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].geoOrthographic().fitExtent([[10, 10], [width - 10, width - 10]], sphere).rotate([-p2[0], props.vertical_tilt - p2[1]]), context);\n          var r = _utils_d3__WEBPACK_IMPORTED_MODULE_10__[\"default\"].interpolate(projection.rotate(), [-p2[0], props.vertical_tilt - p2[1]]);\n          area = endPath.area(country);\n          canvas.transition().duration(props.duration).tween('rotate', function () {\n            return function (t) {\n              projection.rotate(r(t));\n              var centroidPro = projection(p2);\n              context.clearRect(0, 0, width, width);\n              context.beginPath();\n              path(land);\n              context.fillStyle = props.base_color;\n              context.fill();\n\n              if (merged) {\n                context.beginPath();\n                path(merged);\n                context.fillStyle = props.highlight_color;\n                context.fill();\n              } else if (country && area > props.area_threshold || !props.enable_dot) {\n                context.beginPath();\n                path(country);\n                context.fillStyle = props.highlight_color;\n                context.fill();\n              }\n\n              if (props.disputed) {\n                context.beginPath();\n                path(disputed);\n                context.setLineDash(props.disputed_dasharray);\n                context.strokeStyle = props.border_stroke_color;\n                context.lineWidth = props.stroke_width_countries;\n                context.stroke();\n              }\n\n              context.beginPath();\n              path(borders);\n              context.setLineDash([]);\n              context.strokeStyle = props.border_stroke_color;\n              context.lineWidth = props.stroke_width_countries;\n              context.stroke();\n\n              if (props.enable_dot && area < props.area_threshold) {\n                context.beginPath();\n                context.arc(centroidPro[0], centroidPro[1], props.dot_radius, 0, 2 * Math.PI);\n                context.strokeStyle = props.highlight_color;\n                context.lineWidth = props.dot_radius - 2;\n                context.stroke();\n              }\n\n              context.beginPath();\n              path(sphere);\n              context.strokeStyle = props.outer_stroke_color;\n              context.lineWidth = props.stroke_width_sphere;\n              context.stroke();\n            };\n          });\n        } else {\n          context.clearRect(0, 0, width, width);\n          context.beginPath();\n          path(land);\n          context.fillStyle = props.base_color;\n          context.fill();\n\n          if (props.disputed) {\n            context.beginPath();\n            path(disputed);\n            context.setLineDash(props.disputed_dasharray);\n            context.strokeStyle = props.border_stroke_color;\n            context.lineWidth = props.stroke_width_countries;\n            context.stroke();\n          }\n\n          context.beginPath();\n          path(borders);\n          context.setLineDash([]);\n          context.strokeStyle = props.border_stroke_color;\n          context.lineWidth = props.stroke_width_countries;\n          context.stroke();\n          context.beginPath();\n          path(sphere);\n          context.strokeStyle = props.outer_stroke_color;\n          context.lineWidth = props.stroke_width_sphere;\n          context.stroke();\n        }\n      }\n\n      ;\n      canvas.attr('centroid-x', p2[0]);\n      canvas.attr('centroid-y', p2[1]);\n      return this;\n    }\n  }]);\n\n  return Globetrotter;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Globetrotter);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiQXRsYXMiLCJBdGxhc01ldGFkYXRhQ2xpZW50IiwiR2xvYmV0cm90dGVyIiwiYm9yZGVyX3N0cm9rZV9jb2xvciIsIm91dGVyX3N0cm9rZV9jb2xvciIsInN0cm9rZV93aWR0aF9jb3VudHJpZXMiLCJzdHJva2Vfd2lkdGhfc3BoZXJlIiwiaGlnaGxpZ2h0X2NvbG9yIiwiYmFzZV9jb2xvciIsInZlcnRpY2FsX3RpbHQiLCJtYXJnaW4iLCJkdXJhdGlvbiIsImVuYWJsZV9kb3QiLCJkb3RfcmFkaXVzIiwiZGlzcHV0ZWQiLCJsb2NhdGlvbiIsInZhbHVlIiwidHlwZSIsImFyZWFfdGhyZXNob2xkIiwiZGlzcHV0ZWRfZGFzaGFycmF5IiwidG9wb2pzb25GZWF0dXJlcyIsImNvdW50cmllcyIsImRpc3B1dGVkQm91bmRhcmllcyIsImxhbmQiLCJjb3VudHJ5SWRHZXR0ZXIiLCJwcm9wZXJ0aWVzIiwiaXNvQWxwaGEzIiwicHJvcHMiLCJ0b3BvbG9neSIsInRvcG9qc29uIiwiY291bnRyaWVzRmVhdHVyZXMiLCJvYmplY3RzIiwiZGlzcHV0ZWRCb3VuZGFyaWVzRmVhdHVyZXMiLCJsYW5kRmVhdHVyZXMiLCJub2RlIiwic2VsZWN0aW9uIiwic3BoZXJlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJib3JkZXJzIiwiYSIsImIiLCJsYW5kMiIsImdlb21ldHJpZXMiLCJjb25zb2xlIiwibG9nIiwicHJvamVjdGlvbiIsImQzIiwiZ2VvT3J0aG9ncmFwaGljIiwiZml0RXh0ZW50IiwiY2FudmFzIiwiYXBwZW5kU2VsZWN0IiwiYXR0ciIsIngiLCJ5IiwicDEiLCJyb3RhdGUiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInBhdGgiLCJnZW9QYXRoIiwicDIiLCJjb3VudHJ5IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiY291bnRyeUxpc3QiLCJnZXRSZWdpb24iLCJtYXAiLCJkIiwibWVyZ2VkIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJnZW9DZW50cm9pZCIsImwiLCJnZXRDb3VudHJ5IiwiZmVhdHVyZXMiLCJhcmVhIiwiZW5kUGF0aCIsInJlbmRlciIsInIiLCJpbnRlcnBvbGF0ZSIsInRyYW5zaXRpb24iLCJ0d2VlbiIsInQiLCJjZW50cm9pZFBybyIsImNsZWFyUmVjdCIsImJlZ2luUGF0aCIsImZpbGxTdHlsZSIsImZpbGwiLCJzZXRMaW5lRGFzaCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiYXJjIiwiTWF0aCIsIlBJIiwiQ2hhcnRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBLElBQU1BLEtBQUssR0FBRyxJQUFJQyw4RUFBSixFQUFkOztJQUVNQyxZOzs7Ozs7Ozs7Ozs7Ozs7O3VOQUNXO0FBQ2JDLHlCQUFtQixFQUFFLFNBRFI7QUFFYkMsd0JBQWtCLEVBQUUsMEJBRlA7QUFHYkMsNEJBQXNCLEVBQUUsR0FIWDtBQUliQyx5QkFBbUIsRUFBRSxHQUpSO0FBS2JDLHFCQUFlLEVBQUUsU0FMSjtBQU1iQyxnQkFBVSxFQUFFLDBCQU5DO0FBT2JDLG1CQUFhLEVBQUUsRUFQRjtBQVFiQyxZQUFNLEVBQUUsRUFSSztBQVNiQyxjQUFRLEVBQUUsR0FURztBQVViQyxnQkFBVSxFQUFFLElBVkM7QUFXYkMsZ0JBQVUsRUFBRSxDQVhDO0FBWWJDLGNBQVEsRUFBRSxJQVpHO0FBYWJDLGNBQVEsRUFBRTtBQUFFQyxhQUFLLEVBQUUsS0FBVDtBQUFnQkMsWUFBSSxFQUFFO0FBQXRCLE9BYkc7QUFhZ0M7QUFDN0NDLG9CQUFjLEVBQUUsRUFkSDtBQWViQyx3QkFBa0IsRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLENBZlA7QUFnQmJDLHNCQUFnQixFQUFFO0FBQ2hCQyxpQkFBUyxFQUFFLFdBREs7QUFFaEJDLDBCQUFrQixFQUFFLG9CQUZKO0FBR2hCQyxZ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QW9CakUsS0FBSyxDQUFDdEIsc0JBQTFCO0FBQ0FvRCxtQkFBTyxDQUFDb0MsTUFBUjtBQUNEOztBQUNEcEMsaUJBQU8sQ0FBQzhCLFNBQVI7QUFDQTVCLGNBQUksQ0FBQ3BCLE9BQUQsQ0FBSjtBQUNBa0IsaUJBQU8sQ0FBQ2lDLFdBQVIsQ0FBb0IsRUFBcEI7QUFDQWpDLGlCQUFPLENBQUNrQyxXQUFSLEdBQXNCaEUsS0FBSyxDQUFDeEIsbUJBQTVCO0FBQ0FzRCxpQkFBTyxDQUFDbUMsU0FBUixHQUFvQmpFLEtBQUssQ0FBQ3RCLHNCQUExQjtBQUNBb0QsaUJBQU8sQ0FBQ29DLE1BQVI7QUFDQXBDLGlCQUFPLENBQUM4QixTQUFSO0FBQ0E1QixjQUFJLENBQUN2QixNQUFELENBQUo7QUFDQXFCLGlCQUFPLENBQUNrQyxXQUFSLEdBQXNCaEUsS0FBSyxDQUFDdkIsa0JBQTVCO0FBQ0FxRCxpQkFBTyxDQUFDbUMsU0FBUixHQUFvQmpFLEtBQUssQ0FBQ3JCLG1CQUExQjtBQUNBbUQsaUJBQU8sQ0FBQ29DLE1BQVI7QUFDRDtBQUNGOztBQUFBO0FBRUQzQyxZQUFNLENBQUNFLElBQVAsQ0FBWSxZQUFaLEVBQTBCUyxFQUFFLENBQUMsQ0FBRCxDQUE1QjtBQUNBWCxZQUFNLENBQUNFLElBQVAsQ0FBWSxZQUFaLEVBQTBCUyxFQUFFLENBQUMsQ0FBRCxDQUE1QjtBQUVBLGFBQU8sSUFBUDtBQUNEOzs7O0VBcEt3Qm9DLDREOztBQXVLWi9GLDJFQUFmIiwiZmlsZSI6Ii4vc3JjL2xpYi9jaGFydC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRvcG9qc29uIGZyb20gJ3RvcG9qc29uLWNsaWVudCc7XG5cbmltcG9ydCBBdGxhc01ldGFkYXRhQ2xpZW50IGZyb20gJ0ByZXV0ZXJzLWdyYXBoaWNzL2dyYXBoaWNzLWF0bGFzLWNsaWVudCc7XG5pbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9iYXNlL0NoYXJ0Q29tcG9uZW50JztcbmltcG9ydCBkMyBmcm9tICcuL3V0aWxzL2QzJztcblxuY29uc3QgQXRsYXMgPSBuZXcgQXRsYXNNZXRhZGF0YUNsaWVudCgpO1xuXG5jbGFzcyBHbG9iZXRyb3R0ZXIgZXh0ZW5kcyBDaGFydENvbXBvbmVudCB7XG4gIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBib3JkZXJfc3Ryb2tlX2NvbG9yOiAnIzJmMzUzZicsXG4gICAgb3V0ZXJfc3Ryb2tlX2NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBzdHJva2Vfd2lkdGhfY291bnRyaWVzOiAwLjUsXG4gICAgc3Ryb2tlX3dpZHRoX3NwaGVyZTogMC4xLFxuICAgIGhpZ2hsaWdodF9jb2xvcjogJyNmY2U1ODcnLFxuICAgIGJhc2VfY29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiknLFxuICAgIHZlcnRpY2FsX3RpbHQ6IDE1LFxuICAgIG1hcmdpbjogMTAsXG4gICAgZHVyYXRpb246IDc1MCxcbiAgICBlbmFibGVfZG90OiB0cnVlLFxuICAgIGRvdF9yYWRpdXM6IDUsXG4gICAgZGlzcHV0ZWQ6IHRydWUsXG4gICAgbG9jYXRpb246IHsgdmFsdWU6IGZhbHNlLCB0eXBlOiAnY291bnRyeScgfSwgLy8gT3RoZXIgdHlwZXMgYXJlIHBvaW50IGFuZCByZWdpb25cbiAgICBhcmVhX3RocmVzaG9sZDogMTAsXG4gICAgZGlzcHV0ZWRfZGFzaGFycmF5OiBbNSwgNV0sXG4gICAgdG9wb2pzb25GZWF0dXJlczoge1xuICAgICAgY291bnRyaWVzOiAnY291bnRyaWVzJyxcbiAgICAgIGRpc3B1dGVkQm91bmRhcmllczogJ2Rpc3B1dGVkQm91bmRhcmllcycsXG4gICAgICBsYW5kOiAnbGFuZCcsXG4gICAgfSxcbiAgICBjb3VudHJ5SWRHZXR0ZXI6IChwcm9wZXJ0aWVzKSA9PiBwcm9wZXJ0aWVzLmlzb0FscGhhMyxcbiAgfVxuXG4gIGRyYXcoKSB7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzKCk7XG4gICAgY29uc3QgdG9wb2xvZ3kgPSB0aGlzLnRvcG9qc29uKCk7XG4gICAgY29uc3QgY291bnRyaWVzRmVhdHVyZXMgPSB0b3BvbG9neS5vYmplY3RzW3Byb3BzLnRvcG9qc29uRmVhdHVyZXMuY291bnRyaWVzXTtcbiAgICBjb25zdCBkaXNwdXRlZEJvdW5kYXJpZXNGZWF0dXJlcyA9IHRvcG9sb2d5Lm9iamVjdHNbcHJvcHMudG9wb2pzb25GZWF0dXJlcy5kaXNwdXRlZEJvdW5kYXJpZXNdO1xuICAgIGNvbnN0IGxhbmRGZWF0dXJlcyA9IHRvcG9sb2d5Lm9iamVjdHNbcHJvcHMudG9wb2pzb25GZWF0dXJlcy5sYW5kXTtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zZWxlY3Rpb24oKS5ub2RlKCk7XG4gICAgY29uc3Qgc3BoZXJlID0geyB0eXBlOiAnU3BoZXJlJyB9O1xuICAgIGNvbnN0IHsgd2lkdGggfSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgY291bnRyaWVzID0gdG9wb2pzb24uZmVhdHVyZSh0b3BvbG9neSwgY291bnRyaWVzRmVhdHVyZXMpO1xuICAgIGNvbnN0IGJvcmRlcnMgPSB0b3BvanNvbi5tZXNoKHRvcG9sb2d5LCBjb3VudHJpZXNGZWF0dXJlcywgKGEsIGIpID0+IGEgIT09IGIpO1xuICAgIGNvbnN0IGRpc3B1dGVkID0gdG9wb2pzb24ubWVzaCh0b3BvbG9neSwgZGlzcHV0ZWRCb3VuZGFyaWVzRmVhdHVyZXMpO1xuICAgIGNvbnN0IGxhbmQyID0gdG9wb2pzb24uZmVhdHVyZSh0b3BvbG9neSwgbGFuZEZlYXR1cmVzKTtcbiAgICBjb25zdCBsYW5kID0gdG9wb2pzb24ubWVyZ2UodG9wb2xvZ3ksIGNvdW50cmllc0ZlYXR1cmVzLmdlb21ldHJpZXMpO1xuICAgIGNvbnNvbGUubG9nKCdsYW5kJywgbGFuZCwgbGFuZDIpO1xuICAgIGNvbnN0IHByb2plY3Rpb24gPSBkMy5nZW9PcnRob2dyYXBoaWMoKS5maXRFeHRlbnQoW1sxMCwgMTBdLCBbd2lkdGggLSAxMCwgd2lkdGggLSAxMF1dLCBzcGhlcmUpO1xuXG4gICAgdmFyIGNhbnZhcyA9IHRoaXMuc2VsZWN0aW9uKCkuYXBwZW5kU2VsZWN0KCdjYW52YXMnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0Jywgd2lkdGgpO1xuXG4gICAgY29uc3QgeCA9IGNhbnZhcy5hdHRyKCdjZW50cm9pZC14Jyk7XG4gICAgY29uc3QgeSA9IGNhbnZhcy5hdHRyKCdjZW50cm9pZC15Jyk7XG4gICAgY29uc3QgcDEgPSBbLXgsIHByb3BzLnZlcnRpY2FsX3RpbHQgLSB5XTtcblxuICAgIGlmICh4ICYmIHkpIHtcbiAgICAgIHByb2plY3Rpb24ucm90YXRlKHAxKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLm5vZGUoKS5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgY29uc3QgcGF0aCA9IGQzLmdlb1BhdGgocHJvamVjdGlvbiwgY29udGV4dCk7XG5cbiAgICBsZXQgcDIgPSBbXTsgbGV0IGxvY2F0aW9uOyBsZXQgY291bnRyeTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcy5sb2NhdGlvbi52YWx1ZSkgJiYgcHJvcHMubG9jYXRpb24udmFsdWUubGVuZ3RoID09PSAyICYmIHByb3BzLmxvY2F0aW9uLnR5cGUgPT09ICdwb2ludCcpIHtcbiAgICAgIHAyWzBdID0gcHJvcHMubG9jYXRpb24udmFsdWVbMF07XG4gICAgICBwMlsxXSA9IHByb3BzLmxvY2F0aW9uLnZhbHVlWzFdO1xuICAgIH0gZWxzZSBpZiAocHJvcHMubG9jYXRpb24udHlwZSA9PT0gJ3JlZ2lvbicpIHtcbiAgICAgIGNvbnN0IGNvdW50cnlMaXN0ID0gKEF0bGFzLmdldFJlZ2lvbihwcm9wcy5sb2NhdGlvbi52YWx1ZSkuY291bnRyaWVzKS5tYXAoZCA9PiBkLmlzb0FscGhhMyk7XG4gICAgICBjb25zdCBtZXJnZWQgPSB0b3BvanNvbi5tZXJnZSh0b3BvbG9neSwgY291bnRyaWVzLmdlb21ldHJpZXMuZmlsdGVyKGQgPT4gY291bnRyeUxpc3QuaW5jbHVkZXMocHJvcHMuY291bnRyeUlkR2V0dGVyKGQucHJvcGVydGllcykpKSk7XG4gICAgICBwMiA9IGQzLmdlb0NlbnRyb2lkKG1lcmdlZCk7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5sb2NhdGlvbi50eXBlID09PSAnY291bnRyeScpIHtcbiAgICAgIGNvbnN0IGwgPSBBdGxhcy5nZXRDb3VudHJ5KHByb3BzLmxvY2F0aW9uLnZhbHVlKTtcbiAgICAgIGlmIChsKSB7XG4gICAgICAgIGxvY2F0aW9uID0gbC5pc29BbHBoYTM7XG4gICAgICAgIGNvdW50cnkgPSBjb3VudHJpZXMuZmVhdHVyZXMuZmlsdGVyKGQgPT4gcHJvcHMuY291bnRyeUlkR2V0dGVyKGQucHJvcGVydGllcykgPT09IGxvY2F0aW9uKVswXTtcbiAgICAgICAgcDIgPSBkMy5nZW9DZW50cm9pZChjb3VudHJ5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2F0aW9uID0gJ05BJztcbiAgICAgICAgaWYgKHAyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHAyID0gcDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgYXJlYSwgZW5kUGF0aCwgbWVyZ2VkO1xuXG4gICAgcmVuZGVyKCk7XG4gICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKHAxWzBdICE9PSBwMlswXSAmJiBwMVsxXSAhPT0gcDJbMV0gJiYgKHAyWzBdICYmIHAyWzFdKSkge1xuICAgICAgICBlbmRQYXRoID0gZDMuZ2VvUGF0aChkMy5nZW9PcnRob2dyYXBoaWMoKS5maXRFeHRlbnQoW1sxMCwgMTBdLCBbd2lkdGggLSAxMCwgd2lkdGggLSAxMF1dLCBzcGhlcmUpLnJvdGF0ZShbLXAyWzBdLCBwcm9wcy52ZXJ0aWNhbF90aWx0IC0gcDJbMV1dKSwgY29udGV4dCk7XG4gICAgICAgIGNvbnN0IHIgPSBkMy5pbnRlcnBvbGF0ZShwcm9qZWN0aW9uLnJvdGF0ZSgpLCBbLXAyWzBdLCBwcm9wcy52ZXJ0aWNhbF90aWx0IC0gcDJbMV1dKTtcbiAgICAgICAgYXJlYSA9IGVuZFBhdGguYXJlYShjb3VudHJ5KTtcbiAgICAgICAgY2FudmFzLnRyYW5zaXRpb24oKVxuICAgICAgICAgIC5kdXJhdGlvbihwcm9wcy5kdXJhdGlvbilcbiAgICAgICAgICAudHdlZW4oJ3JvdGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgcHJvamVjdGlvbi5yb3RhdGUocih0KSk7XG4gICAgICAgICAgICAgIGNvbnN0IGNlbnRyb2lkUHJvID0gcHJvamVjdGlvbihwMik7XG4gICAgICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCB3aWR0aCk7XG4gICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgIHBhdGgobGFuZCk7XG4gICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gcHJvcHMuYmFzZV9jb2xvcjtcbiAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgICAgIGlmIChtZXJnZWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIHBhdGgobWVyZ2VkKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHByb3BzLmhpZ2hsaWdodF9jb2xvcjtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgoY291bnRyeSAmJiBhcmVhID4gcHJvcHMuYXJlYV90aHJlc2hvbGQpIHx8ICghcHJvcHMuZW5hYmxlX2RvdCkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIHBhdGgoY291bnRyeSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBwcm9wcy5oaWdobGlnaHRfY29sb3I7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHByb3BzLmRpc3B1dGVkKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBwYXRoKGRpc3B1dGVkKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKHByb3BzLmRpc3B1dGVkX2Rhc2hhcnJheSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHByb3BzLmJvcmRlcl9zdHJva2VfY29sb3I7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBwcm9wcy5zdHJva2Vfd2lkdGhfY291bnRyaWVzO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTsgcGF0aChib3JkZXJzKTsgY29udGV4dC5zZXRMaW5lRGFzaChbXSk7IGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBwcm9wcy5ib3JkZXJfc3Ryb2tlX2NvbG9yOyBjb250ZXh0LmxpbmVXaWR0aCA9IHByb3BzLnN0cm9rZV93aWR0aF9jb3VudHJpZXM7IGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgIGlmIChwcm9wcy5lbmFibGVfZG90ICYmIGFyZWEgPCBwcm9wcy5hcmVhX3RocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hcmMoY2VudHJvaWRQcm9bMF0sIGNlbnRyb2lkUHJvWzFdLCBwcm9wcy5kb3RfcmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHByb3BzLmhpZ2hsaWdodF9jb2xvcjtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHByb3BzLmRvdF9yYWRpdXMgLSAyO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgcGF0aChzcGhlcmUpO1xuICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gcHJvcHMub3V0ZXJfc3Ryb2tlX2NvbG9yO1xuICAgICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHByb3BzLnN0cm9rZV93aWR0aF9zcGhlcmU7XG4gICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIHdpZHRoKTtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgcGF0aChsYW5kKTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBwcm9wcy5iYXNlX2NvbG9yO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgaWYgKHByb3BzLmRpc3B1dGVkKSB7XG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTsgcGF0aChkaXNwdXRlZCk7XG4gICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChwcm9wcy5kaXNwdXRlZF9kYXNoYXJyYXkpO1xuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBwcm9wcy5ib3JkZXJfc3Ryb2tlX2NvbG9yO1xuICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gcHJvcHMuc3Ryb2tlX3dpZHRoX2NvdW50cmllcztcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIHBhdGgoYm9yZGVycyk7XG4gICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goW10pO1xuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gcHJvcHMuYm9yZGVyX3N0cm9rZV9jb2xvcjtcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBwcm9wcy5zdHJva2Vfd2lkdGhfY291bnRyaWVzO1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBwYXRoKHNwaGVyZSk7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBwcm9wcy5vdXRlcl9zdHJva2VfY29sb3I7XG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gcHJvcHMuc3Ryb2tlX3dpZHRoX3NwaGVyZTtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY2FudmFzLmF0dHIoJ2NlbnRyb2lkLXgnLCBwMlswXSk7XG4gICAgY2FudmFzLmF0dHIoJ2NlbnRyb2lkLXknLCBwMlsxXSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHbG9iZXRyb3R0ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})